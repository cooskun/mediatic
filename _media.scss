// Function, default usage
@function mediatic($args) {
  // Media map to keep min-width, orientation etc...
  $media: () !default;

  // Variable to keep final media query
  $tail: null !default;

  // Device
  $device: null !default;

  // Variable to check if device has retina screen
  $is-retina: null !default;  

  // Arg control in loop
  @each $arg in $args {
    // Arg is retina and retina not set yet
    @if $arg == 'retina' {
      $is-retina: true;
      $device: 'only screen';
    }

    // Arg is a device and device not set yet
    @else if is_device($arg) and $device == null {      
      $device: map-get($devices, $arg);
    }

    // Arg is a query
    @else if is_query($arg) {
      $query: map-get($queries, $arg); 

      @each $key, $value in $query {
        @if map-has-key($media, $key) == false {
          $media: map-merge($media, ( $key: $value ));
        }
      }
    }

    @else if is_breakpoint($arg) {
      $breakpoint: map-get($breakpoints, $arg);

      // min-width and max-width exist already
      @if map-has-key($media, min-width) and map-has-key($media, max-width) {
        @warn "You can add maximum two number value";
      }
      // min-width exist, max-width not exist    
      @else if map-has-key($media, min-width) {
        $current-min-width: map-get($media, min-width);

        // About to set max-width
        // Make sure incoming value is bigger than min-width
        // If it is, set the value as max-width
        @if $current-min-width <= $breakpoint {
          $media: map-merge($media, (
            max-width: #{$breakpoint - 1}
          ));
        }
        // Developer made a sorting mistake
        // max-width written before min-width
        // Correct them on the media  
        @else {
          $media: map-merge($media, (
            min-width: $breakpoint,
            max-width: $current-min-width
          ))
        }
      }
      // Both min-width and max-width not exist
      @else {
        $media: map-merge($media, (min-width: $breakpoint));
      } 
    }    

    @else if is_number($arg) {
      // Fix if value has no unit
      $arg: fix_unitless($arg);

      // min-width and max-width exist already
      @if map-has-key($media, min-width) and map-has-key($media, max-width) {
        @warn "You can add maximum two number value";
      }
      // min-width exist, max-width not exist    
      @else if map-has-key($media, min-width) {
        $current-min-width: map-get($media, min-width);

        // About to set max-width
        // Make sure incoming value is bigger than min-width
        // If it is, set the value as max-width
        @if $current-min-width <= $breakpoint {
          $media: map-merge($media, (
            max-width: $breakpoint
          ));
        }
        // Developer made a sorting mistake
        // max-width written before min-width
        // Correct them on the media  
        @else {
          $media: map-merge($media, (
            min-width: $breakpoint,
            max-width: $current-min-width
          ))
        }
      }
      // Both min-width and max-width not exist
      @else {
        $media: map-merge($media, (min-width: $breakpoint));
      }
    }
  }

  // Device not set, and no retina
  // Set default device as choosen device
  @if $is-retina != true and $device == null {
    $tail: $default-device;
  }

  // Not retina, device prefer exist
  // Create the tail that starts with choosen device
  @if $is-retina != true and $device != null {
    $tail: $device;
  }

  @if $is-retina == true {
    @each $key, $value in $media {
      $tail: $tail 'and (#{ $key }: #{ $value })';
    }
    $tail: retina_extend($tail);
  }
  @else {
    @each $key, $value in $media {
      $tail: $tail ' and (#{ $key }: #{ $value })';
    }
  }

  // Print out the media
  @return $tail;
}

// Create instance as mixin too 
@mixin mediatic($args) {
  // Get the query media
  $media: mediatic($args);

  // Print out the media
  @media #{$media} {
    @content;
  }
}